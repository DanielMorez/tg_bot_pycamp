import logging

from aiogram import Dispatcher, F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (InlineKeyboardButton, KeyboardButton,
                           ReplyKeyboardMarkup)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiohttp import ClientConnectorError, ContentTypeError

from src.keyboards import messages
from src.services.auth import user_login
from src.services.cache import cache_service
from src.utils.readable_time import get_readable_expires

router = Router()
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AuthState(StatesGroup):
    waiting_for_phone = State()


@router.message(Command('start'))
async def start_command(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text='üîê–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è', callback_data='auth', request_contact=True))

    builder.add(
        InlineKeyboardButton(
            text='üí¨–ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π',
            url='https://t.me/your_support_bot',  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        )
    )
    builder.add(
        InlineKeyboardButton(
            text='ü¶ä–ù–∞—à –∫–∞–Ω–∞–ª',
            url='https://t.me/codelis_digest',  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        )
    )
    builder.add(
        InlineKeyboardButton(
            text='‚ÅâÔ∏è–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã',
            callback_data='faq',
        )
    )

    builder.adjust(1, 2, 1)

    await message.answer(messages.START, reply_markup=builder.as_markup())



@router.callback_query(F.data == 'auth')
async def auth_callback(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à —Å—Å—ã–ª–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    cached_auth_data = await cache_service.get_auth_link(user_id)
    
    if cached_auth_data:
        # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –µ—Å—Ç—å –≤ –∫–µ—à–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
        import time
        current_time = int(time.time())
        expires_at = cached_auth_data['expires_at']
        
        if current_time < expires_at:
            readable_time = get_readable_expires(expires_at, current_time)
            
            builder = InlineKeyboardBuilder()
            builder.add(
                InlineKeyboardButton(
                    text='üîë –°—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
                    url=cached_auth_data['link'],
                )
            )
            
            await callback.message.delete()
            await callback.message.answer(
                f"‚è∞ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –µ—â–µ {readable_time}",
                reply_markup=builder.as_markup()
            )
            return
    
    # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç –≤ –∫–µ—à–µ –∏–ª–∏ –æ–Ω–∞ –∏—Å—Ç–µ–∫–ª–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    cached_phone = await cache_service.get_phone(user_id)
    
    if cached_phone:
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –µ—Å—Ç—å –≤ –∫–µ—à–µ, —Å—Ä–∞–∑—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        loading_sticker = await callback.message.answer_sticker(
            'CAACAgIAAxkBAAExqU9nq5ox8OKuKAR3gVTbqlxsOocsYAACeBsAArZjKElJPqq2J-v4QTYE'
        )
        loading_message = await callback.message.answer('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É...')
        
        try:
            response = await user_login(
                telegram_user_id=str(callback.from_user.id),
                telegram_username=callback.from_user.username,
                phone=cached_phone,
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –≤ –∫–µ—à –Ω–∞ 10 –º–∏–Ω—É—Ç
            import time
            expires_at = int(time.time()) + 600  # 10 –º–∏–Ω—É—Ç
            await cache_service.set_auth_link(user_id, response['authorization_link'], expires_at)
            
            builder = InlineKeyboardBuilder()
            builder.add(
                InlineKeyboardButton(
                    text='üîë –°—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
                    url=response['authorization_link'],
                )
            )
            
            await loading_message.delete()
            await loading_sticker.delete()
            await callback.message.answer(messages.AUTH_LINK, reply_markup=builder.as_markup())
            
        except (ClientConnectorError, ContentTypeError) as e:
            await loading_message.delete()
            await loading_sticker.delete()
            await callback.message.answer(
                '–ù–∞—à —Å–µ—Ä–≤–∏—Å —Å–µ–π—á–∞—Å –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–∏–ª—ë–≥ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å ‚Äî –º—ã –±—ã—Å—Ç—Ä–æ —á–∏–Ω–∏–º –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º,' 
                ' —á—Ç–æ–±—ã –≤—Å—ë —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–ª–æ –∫–∞–∫ —á–∞—Å—ãü§ï'
            )
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ API: {e}')
            return
    else:
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç –≤ –∫–µ—à–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text='–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±', request_contact=True)]],
            resize_keyboard=True,
            one_time_keyboard=True,
        )

        await callback.message.delete()

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await callback.message.answer(messages.ASK_4_PHONE, reply_markup=keyboard)
        await state.set_state(AuthState.waiting_for_phone)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(AuthState.waiting_for_phone, F.contact)
async def process_phone(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    phone_number = message.contact.phone_number
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –∫–µ—à–µ –Ω–∞ 7 –¥–Ω–µ–π
    await cache_service.set_phone(message.from_user.id, phone_number)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    await state.update_data(phone=phone_number)

    loading_sticker = await message.answer_sticker(
        'CAACAgIAAxkBAAExqU9nq5ox8OKuKAR3gVTbqlxsOocsYAACeBsAArZjKElJPqq2J-v4QTYE'
    )
    loading_message = await message.answer(
        '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É...',
        reply_markup=types.ReplyKeyboardRemove(),  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

    try:
        response = await user_login(
            telegram_user_id=str(message.from_user.id),
            telegram_username=message.from_user.username,
            phone=phone_number,
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –≤ –∫–µ—à –Ω–∞ 10 –º–∏–Ω—É—Ç
        import time
        expires_at = int(time.time()) + 600  # 10 –º–∏–Ω—É—Ç
        await cache_service.set_auth_link(message.from_user.id, response['authorization_link'], expires_at)
        
    except (ClientConnectorError, ContentTypeError) as e:
        await loading_message.delete()
        await loading_sticker.delete()
        await message.answer(
            '–ù–∞—à —Å–µ—Ä–≤–∏—Å —Å–µ–π—á–∞—Å –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–∏–ª—ë–≥ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å ‚Äî –º—ã –±—ã—Å—Ç—Ä–æ —á–∏–Ω–∏–º –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º,' 
            ' —á—Ç–æ–±—ã –≤—Å—ë —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–ª–æ –∫–∞–∫ —á–∞—Å—ãü§ï',
            reply_markup=types.ReplyKeyboardRemove(),  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ API: {e}')
        return

    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(
            text='üîë –°—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
            url=response['authorization_link'],  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        )
    )

    await loading_message.delete()
    await loading_sticker.delete()

    await message.answer(messages.AUTH_LINK, reply_markup=builder.as_markup())


def register_handlers(dp: Dispatcher):
    dp.include_router(router)
